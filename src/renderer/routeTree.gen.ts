/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspaceIndexRouteImport } from './routes/workspace/index'
import { Route as WorkspaceImageRouteImport } from './routes/workspace/image'
import { Route as HomeApiKeyModalRouteImport } from './routes/home/api-key-modal'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceIndexRoute = WorkspaceIndexRouteImport.update({
  id: '/workspace/',
  path: '/workspace/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceImageRoute = WorkspaceImageRouteImport.update({
  id: '/workspace/image',
  path: '/workspace/image',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeApiKeyModalRoute = HomeApiKeyModalRouteImport.update({
  id: '/api-key-modal',
  path: '/api-key-modal',
  getParentRoute: () => HomeRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/settings': typeof SettingsRoute
  '/home/api-key-modal': typeof HomeApiKeyModalRoute
  '/workspace/image': typeof WorkspaceImageRoute
  '/workspace': typeof WorkspaceIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/settings': typeof SettingsRoute
  '/home/api-key-modal': typeof HomeApiKeyModalRoute
  '/workspace/image': typeof WorkspaceImageRoute
  '/workspace': typeof WorkspaceIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/settings': typeof SettingsRoute
  '/home/api-key-modal': typeof HomeApiKeyModalRoute
  '/workspace/image': typeof WorkspaceImageRoute
  '/workspace/': typeof WorkspaceIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/settings'
    | '/home/api-key-modal'
    | '/workspace/image'
    | '/workspace'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/settings'
    | '/home/api-key-modal'
    | '/workspace/image'
    | '/workspace'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/settings'
    | '/home/api-key-modal'
    | '/workspace/image'
    | '/workspace/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  WorkspaceImageRoute: typeof WorkspaceImageRoute
  WorkspaceIndexRoute: typeof WorkspaceIndexRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/': {
      id: '/workspace/'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof WorkspaceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/image': {
      id: '/workspace/image'
      path: '/workspace/image'
      fullPath: '/workspace/image'
      preLoaderRoute: typeof WorkspaceImageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/api-key-modal': {
      id: '/home/api-key-modal'
      path: '/api-key-modal'
      fullPath: '/home/api-key-modal'
      preLoaderRoute: typeof HomeApiKeyModalRouteImport
      parentRoute: typeof HomeRoute
    }
  }
}

interface HomeRouteChildren {
  HomeApiKeyModalRoute: typeof HomeApiKeyModalRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeApiKeyModalRoute: HomeApiKeyModalRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRouteWithChildren,
  SettingsRoute: SettingsRoute,
  WorkspaceImageRoute: WorkspaceImageRoute,
  WorkspaceIndexRoute: WorkspaceIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
